package com.example.administrator.school_circle.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COURSE_TABLE".
*/
public class CourseTableDao extends AbstractDao<CourseTable, Long> {

    public static final String TABLENAME = "COURSE_TABLE";

    /**
     * Properties of entity CourseTable.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Week = new Property(1, int.class, "week", false, "WEEK");
        public final static Property Weekday = new Property(2, int.class, "weekday", false, "WEEKDAY");
        public final static Property Lesson = new Property(3, int.class, "lesson", false, "LESSON");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property Teacher = new Property(5, String.class, "teacher", false, "TEACHER");
        public final static Property Classroom = new Property(6, String.class, "classroom", false, "CLASSROOM");
        public final static Property ClassDuration = new Property(7, int.class, "classDuration", false, "CLASS_DURATION");
    }


    public CourseTableDao(DaoConfig config) {
        super(config);
    }
    
    public CourseTableDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COURSE_TABLE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"WEEK\" INTEGER NOT NULL ," + // 1: week
                "\"WEEKDAY\" INTEGER NOT NULL ," + // 2: weekday
                "\"LESSON\" INTEGER NOT NULL ," + // 3: lesson
                "\"NAME\" TEXT," + // 4: name
                "\"TEACHER\" TEXT," + // 5: teacher
                "\"CLASSROOM\" TEXT," + // 6: classroom
                "\"CLASS_DURATION\" INTEGER NOT NULL );"); // 7: classDuration
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COURSE_TABLE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CourseTable entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getWeek());
        stmt.bindLong(3, entity.getWeekday());
        stmt.bindLong(4, entity.getLesson());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String teacher = entity.getTeacher();
        if (teacher != null) {
            stmt.bindString(6, teacher);
        }
 
        String classroom = entity.getClassroom();
        if (classroom != null) {
            stmt.bindString(7, classroom);
        }
        stmt.bindLong(8, entity.getClassDuration());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CourseTable entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getWeek());
        stmt.bindLong(3, entity.getWeekday());
        stmt.bindLong(4, entity.getLesson());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String teacher = entity.getTeacher();
        if (teacher != null) {
            stmt.bindString(6, teacher);
        }
 
        String classroom = entity.getClassroom();
        if (classroom != null) {
            stmt.bindString(7, classroom);
        }
        stmt.bindLong(8, entity.getClassDuration());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public CourseTable readEntity(Cursor cursor, int offset) {
        CourseTable entity = new CourseTable( //
            cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // week
            cursor.getInt(offset + 2), // weekday
            cursor.getInt(offset + 3), // lesson
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // teacher
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // classroom
            cursor.getInt(offset + 7) // classDuration
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CourseTable entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setWeek(cursor.getInt(offset + 1));
        entity.setWeekday(cursor.getInt(offset + 2));
        entity.setLesson(cursor.getInt(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTeacher(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setClassroom(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setClassDuration(cursor.getInt(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CourseTable entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CourseTable entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CourseTable entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
